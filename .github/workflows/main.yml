name: CI/CD

on:
  pull_request:
  release:
    types: [created, published, edited]
  push:
    branches:
      - master
      - "releases/*"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: .node-version
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --ignore-scripts
      - name: Check version consistency
        run: |
          PACKAGE_VERSION=$(cat package.json | jq -r .version)
          ACTION_TAG=$(cat action.yml | grep 'image: docker://ghcr.io' | sed 's/.*://g')

          if [ "$PACKAGE_VERSION" != "$ACTION_TAG" ]; then
            echo "::error::Version mismatch! package.json has $PACKAGE_VERSION but action.yml has $ACTION_TAG"
            exit 1
          fi

          echo "‚úÖ Versions match: $PACKAGE_VERSION"
      - name: Run knip
        run: pnpm run knip

  ci:
    name: Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: .node-version
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --ignore-scripts
      - name: Run integration tests
        run: pnpm run test

  cd:
    name: Deployment
    needs: [ci, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - id: docker-tag
        run: |
          ref="${{ github.ref_name }}"
          # Handle pull requests
          if [[ "$ref" =~ ^[0-9]+/merge$ ]]; then
            pr_number=$(echo "$ref" | sed 's#/merge##')
            tag="pr-$pr_number"
          else
            # Handle other refs
            tag=$(                        \
              echo "$ref"                 \
              | sed 's#refs/heads/##g'    \
              | sed 's#refs/tags/##g'     \
              | sed 's#refs/pull/##g'     \
              | tr '/' '_'                \
              | tr -d '#'                 \
            )
            if [ "$tag" == "master" ]; then
              tag="latest"
            fi
          fi

          echo "tag=$tag" >> $GITHUB_OUTPUT
      - id: package
        run: echo "version=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT
      - name: Collect Docker labels & tags
        id: docker-labels-tags
        run: |
          echo 'labels<<__LABELS_EOF__' >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.title=47ng/actions-clever-cloud" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.description=GitHub action to deploy to Clever Cloud" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.version=${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.revision=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.licenses=MIT" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.source=https://github.com/${{github.repository}}/tree/${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.documentation=https://github.com/${{github.repository}}/blob/master/packages/server/README.md" >> $GITHUB_OUTPUT
          echo "org.opencontainers.image.url=https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}" >> $GITHUB_OUTPUT
          echo '__LABELS_EOF__' >> $GITHUB_OUTPUT
          echo 'tags<<__TAGS_EOF__' >> $GITHUB_OUTPUT
          if [ "${{ github.ref_name }}" == "master" ]; then
            echo "ghcr.io/47ng/actions-clever-cloud:${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT
            echo "47ng/actions-clever-cloud:${{ steps.package.outputs.version }}" >> $GITHUB_OUTPUT
          fi
          echo "ghcr.io/47ng/actions-clever-cloud:${{ steps.docker-tag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "ghcr.io/47ng/actions-clever-cloud:git-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "47ng/actions-clever-cloud:${{ steps.docker-tag.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "47ng/actions-clever-cloud:git-${{ github.sha }}" >> $GITHUB_OUTPUT
          echo '__TAGS_EOF__' >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker-build-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          labels: "${{ steps.docker-labels-tags.outputs.labels }}"
          tags: "${{ steps.docker-labels-tags.outputs.tags }}"
          push: true
      - name: Generate step summary
        run: |
          echo "## üê≥ &nbsp;Docker image" >> $GITHUB_STEP_SUMMARY
          echo "Digest: \`${{ steps.docker-build-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "### üìå &nbsp;Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.docker-labels-tags.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "### üè∑ &nbsp;Labels" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.docker-labels-tags.outputs.labels }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            const body = `<!-- docker-build-comment -->
            ## üê≥ &nbsp;Docker image preview

            Use this to preview this PR in your workflows:

            \`\`\`yaml
            - uses: docker://ghcr.io/47ng/actions-clever-cloud@${{ steps.docker-tag.outputs.tag }}
            # Use the git SHA for pinning to a specific commit
            - uses: docker://ghcr.io/47ng/actions-clever-cloud@git-${{ github.sha }}
            \`\`\`

            <details>
            <summary>Image metadata</summary>
            <br/>

            Digest: \`${{ steps.docker-build-push.outputs.digest }}\`

            ### üìå &nbsp;Tags
            \`\`\`
            ${{ steps.docker-labels-tags.outputs.tags }}
            \`\`\`

            ### üè∑ &nbsp;Labels
            \`\`\`
            ${{ steps.docker-labels-tags.outputs.labels }}
            \`\`\`

            </details>

            ---
            <sub>ü§ñ This comment is updated on every push</sub>`;

            // Find existing comment by marker
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.body.startsWith('<!-- docker-build-comment -->')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
